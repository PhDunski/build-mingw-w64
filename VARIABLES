Le script qui se trouve ici tente d'être le plus souple et adaptable à vos besoins possible.

Il utilise donc un certain nombre de variable dont vous pouvez modifier les valeurs:
les noms de dossier
===================
Quatre variables permettent de définir le nom des dossiers utilisés par ce script, il s'agit de :
BASE_DIR			correspond au dossier racine utilisé par le script 
					( par défaut`pwd` , qui correspond au dossier dans lequel le script se trouve )
BUILD_DIR			correspond au nom du dossier dans lequel les compilations sont faites 
					( par défaut build)
LOG_DIR				corresond au nom du dossier dans lequel les logs sont placés
					( par défaut logs )
TAR_DIR				correspond au dossier dans lequel sont placées les archives téléchargées
					( par défaut : archives)
BASE_SRC			correspond au dossier dans lequel seront placées les sources (par défaut : source)
les options globales de compilation
===================================
BUILD				la cible finale pour laquelle les outils sont compilés. Les valeurs possibles sont
						- x86_64-w64-mingw32 (version 64bits)(valeur par défaut)
						- x86-w64-mingw32    (version 32bits !!!non testée!!)
ENABLE_MULTILIB		active ou désactive le support du multilib . Les valeurs possibles sont
						- yes (valeur par défaut)
						- no (!!! non testé !!!)
ENABLE_SECURE_API	active le support de l'API sécurisée par défaut. Les valeurs possibles sont
						- yes (valeur par défaut)
						- no 
					NOTA : le fait de choisir la valeur no n'empêche absolument pas d'utiliser l'API
						   sécurisée, mais vous oblige à définir le symbole MINGW_HAS_SECURE_API à 1
						   dans les options de compilations de votre projet si vous souhaitez en profiter
PREFIX=/mingw		Le dossier de destination général ( par défaut /mingw, à définir correctement dans
					le fichier fstab qui se trouve dans le dossier msys/etc)
CLEAN_SRC=no		force au nettoyage du dossier source. Placer cette variable a yes aura pour résultat
					de supprimer l'ensemble contenu du dossier défini avec la variable BASE_SRC
CLEAN_TAR=no		force au nettoyage du dossier archives. Placer cette variable a yes aura pour résultat
					de supprimer l'ensemble contenu du dossier défini avec la variable TAR_DIR
CLEAN_LOG=no		force au nettoyage du dossier log. Placer cette variable a yes aura pour résultat
					de supprimer l'ensemble contenu du dossier défini avec la variable LOG_DIR
CLEAN_BUILD=no      force au nettoyage du dossier log. Placer cette variable a yes aura pour résultat
					de supprimer l'ensemble contenu du dossier défini avec la variable BUILD_DIR
FIRST_PASS_ENABLED  indique s'il faut effectuer une première passe (valeur par défaut : yes)
SECOND_PASS_ENABLED  indique s'il faut effectuer une seconde passe (valeur par défaut : no)

WANT_XXX			Permet d'indiquer si on veut que le paquet XXX soit (compilé) (valeur par défaut: yes)
					Pour l'instant, les paquets installables sont:
						- Gdb (le débuggeur)
						- make
						- libiconv 
						- gettext ( !!! gettext dépend de libiconv, choisir d'installer gettext 
						           forcera l'installation de libiconv)
						- openssl
						- libxml2
					
NOTA : Le script se base, pour les archives, sur la présence ou sur l'absence de fichier dont le nom est
	   défini pour déterminer s'il faut ou non le télécharger et sur la présence d'un fichier log pour
	   tout ce qui a trait au "checkout" sur svn, à l'extraction d'archives, à la configuration, 
	   à la compilation et à l'installation.

	   Le fait de donner la valeur yes à la variable CLEAN_LOG aura donc pour effet de forcer le processus
	   complet, depuis l'extraction de l'archive jusqu'à l'installation finale

FORCE_RECONFIGURE	permet de définir l'ensemble des variables afin de forcer le processus de configuration
					a pour résultat =no
Les éléments installables
========================

Les variables utilisées pour les différents éléments à installer sont définie sous la forme de tableaux.
Ces tableaux suivent toujours la forme générique suivante:
tableau[0] : le nom de l'élément à installer (utilisé lors de la récupération des sources et pour 
			 déterminer le dossier de compilation spécifique pour l'élément
tableau[1] : la version de l'élément à compiler (utilisé lors de la récupération des sources 
			 et lors de la configuration
tableau[2] : le format de l'archive à télécharger (.tar.gz, tgz ou .tar.bz2) et à utiliser pour
             l'extraction des sources lorsque l'on n'utilise pas SVN.
tableau[3] : la "saveur" des sources recherchées : permet de choisir entre un snapshot et une version release
tableau[4] : l'adresse de téléchargement de l'archive
tableau[5] : l'adresse SVN pour récupérer les sources si l'on utilise SVN
tableau[6] : GO / NO GO indiquant si l'élément doit être compilé ou non : vide s'il ne doit pas l'être, 
             défini à 'doit' s'il doit l'être
tableau[7] et suivants : options à passer au script de configuration (de préférence, une option par champs)

NOTA : -Du fait même de la complexité du processus de compilation complet ( la crt doit être compilée avant la 
		libgcc, mais après winpthreads qui ne peut être compilé qu'en version statique tant que la crt n'a pas
		été compilée, mais qui peut être compilé en version dll une fois que c'est le cas), 
		ou de l'organisation des sources (le checkout de mingw-w64 permet de récupére d'un seul coup, mais donc
		dans un même dossier racine, aussi bien les fichiers d'en-tête que la crt et winpthreads), certains éléments
		peuvent apparaitre en plusieurs exemplaires ou avec des valeurs non définies.
		Il est PRIMORDIAL, quand une valeur n'est pas définie, de la laisser en l'état et de ne la supprimer 
		EN AUCUN CAS, sous peine de faire échouer le processus.
		
	   -De même, vous ne devez EN AUCUN CAS envisager de modifier les valeurs qui font appel à des variable, 
	    sous peine de faire échouer l'une ou l'autre étape du processus.